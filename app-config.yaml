app:
  title: Awesome Backstage
  baseUrl: http://localhost:3000

organization:
  name: Myles Backstage

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    # sqlite is configured by default to store in-memory
    connection: # ':memory:'
      directory: '/Users/mylescoleman/Desktop/Bootcamp/backstage-test/backstage/data/backstage.sqlite'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      apps: 
        - $include: github-app-backstage-myles-credentials.yaml
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

# proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  environment: development
  providers:
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName

# scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  providers:
    github:
      # the provider ID can be any camelCase string
      providerId:
        organization: 'myles-liatrio-org' # string
        catalogPath: '/catalog-info.yaml' # string
        filters:
          branch: 'main' # The branch to look in
          repository: '.*' # Regex
        schedule: # same options as in TaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { minutes: 1 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }
      wildcardProviderId:
        organization: 'myles-liatrio-org'
        catalogPath: '/**/template.yaml' # This will search all folders for files named template.yaml
        filters:
          branch: 'main' # The branch to look in
          repository: '.*' # Regex
        schedule:
          frequency: { minutes: 1 }
          timeout: { minutes: 3 }
    githubOrg:
      id: production
      githubUrl: https://github.com
      orgs: ['myles-liatrio-org']
      schedule:
        initialDelay: { seconds: 30 }
        frequency: { hours: 1 }
        timeout: { minutes: 50 }
        
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, Template]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    # Demo template
    - type: file
      target: templates/template.yaml
      rules:
        - allow: [Template]

    # Grabs catalog-info.yaml from remote repo in the same organization (doesn't work)
    # - type: url
    #   target: https://github.com/myles-liatrio-org/*/blob/main/catalog-info.yaml
    #   rules:
    #     - allow: [Component, API, User, Group]
    
    # Grabs template.yaml from specic remote repo (does work)
    - type: url
      target: https://github.com/myles-liatrio-org/org-repo/blob/main/template.yaml
      rules:
        - allow: [Template]
